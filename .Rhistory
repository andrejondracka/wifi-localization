for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_train_bybuilding_list <- lapply(train_bybuilding_list, as.h2o)
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
#h2o_gbm_lat <- map2 (h2o_train_bybuilding_list, h2o_val_bybuilding_list,
#                     function(xxx,yyy) h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = xxx, validation_frame = yyy))
h2o_gbm_lat_b2 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lat_b0 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lat_b1 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_fl_b2 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_fl_b0 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_fl_b1 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_lon_b2 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lon_b0 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lon_b1 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
###make predicts
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)
####error analysis
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
valdata_finalpreds$err_floor <- abs(as.numeric(valdata_finalpreds$FLOOR) - as.numeric(valdata_finalpreds$floor_predict))
valdata_finalpreds$err_building <- abs(as.numeric(levels(valdata_finalpreds$BUILDINGID))[valdata_finalpreds$BUILDINGID]
- as.numeric(levels(valdata_finalpreds$building_predicted))[valdata_finalpreds$building_predicted])
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_total <- valdata_finalpreds$err_distance + 4*valdata_finalpreds$err_floor + 50*valdata_finalpreds$err_building
numpc <- 50 ###IMPORTANT PARMETER! DEFINES THE NUMBER OF PCs TO TAKE INTO ACCOUNT.
traindata_pcd <- data.frame(pcatest$x[,1:numpc])
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:numpc])
###a model for building, predicting on val
h2o.init()
traindata_building <- cbind(traindata_pcd, i=traindata$BUILDINGID)
h2o_traindata_building <- as.h2o(traindata_building)
valdata_building <- cbind(valdata_pcd, i=valdata$BUILDINGID)
h2o_valdata_building <- as.h2o(valdata_building)
h2o_initbuild <- h2o.randomForest(y = 'i', training_frame = h2o_traindata_building, validation_frame = h2o_valdata_building,
ntrees = 200, max_depth = 50)
h2o_building_predicts <- h2o.predict(h2o_initbuild, h2o_valdata_building)
building_predicts <- as.data.frame(h2o_building_predicts)
valdata$building_predicted <- building_predicts$predict
valdata$building_predicted <- factor(valdata$building_predicted)
###split datasets, run models for each
predictornames <- colnames(traindata_pcd[,1:numpc])
traindata_pcd2 <- cbind(traindata_pcd, traindata[,521:529])
valdata_pcd2 <- cbind(valdata_pcd, valdata[,521:530])
train_bybuilding_list <- list()
val_bybuilding_list <- list()
for (i in unique(traindata_pcd2$BUILDINGID)){
train_bybuilding_list[[i]] <- subset(traindata_pcd2, BUILDINGID == i)
}
for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_train_bybuilding_list <- lapply(train_bybuilding_list, as.h2o)
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
#h2o_gbm_lat <- map2 (h2o_train_bybuilding_list, h2o_val_bybuilding_list,
#                     function(xxx,yyy) h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = xxx, validation_frame = yyy))
h2o_gbm_lat_b2 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lat_b0 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lat_b1 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_fl_b2 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_fl_b0 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_fl_b1 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_lon_b2 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lon_b0 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lon_b1 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
###make predicts
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)
####error analysis
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
valdata_finalpreds$err_floor <- abs(as.numeric(valdata_finalpreds$FLOOR) - as.numeric(valdata_finalpreds$floor_predict))
valdata_finalpreds$err_building <- abs(as.numeric(levels(valdata_finalpreds$BUILDINGID))[valdata_finalpreds$BUILDINGID]
- as.numeric(levels(valdata_finalpreds$building_predicted))[valdata_finalpreds$building_predicted])
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_total <- valdata_finalpreds$err_distance + 4*valdata_finalpreds$err_floor + 50*valdata_finalpreds$err_building
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
h2o.init()
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
as.data.frame(h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`2`
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)
library(tidyverse)
library(h2o)
traindata <- read.csv(file = 'trainingData.csv')
valdata <- read.csv('validationData.csv')
valdata$FLOOR <- factor(valdata$FLOOR)
valdata$BUILDINGID <- factor(valdata$BUILDINGID)
traindata$FLOOR <- factor(traindata$FLOOR)
traindata$BUILDINGID <- factor(traindata$BUILDINGID)
traindata_loc <- traindata[,1:520]
valdata_loc <- valdata[,1:520]
traindata_loc[traindata_loc == 100] = -105
valdata_loc[valdata_loc == 100] = -105
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = F)))
#traindata_loc <- traindata_loc + 105
traindata_loc[is.na(traindata_loc)] = 0
valdata_loc_cs <- t(scale(t(valdata_loc), center = T, scale = F))
#valdata_loc_cs <- valdata_loc + 105
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
###pca and selectinbg the first 50 (changeable by changing numpc value) components
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
numpc <- 50 ###IMPORTANT PARMETER! DEFINES THE NUMBER OF PCs TO TAKE INTO ACCOUNT.
traindata_pcd <- data.frame(pcatest$x[,1:numpc])
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:numpc])
###a model for building, predicting on val
h2o.init()
traindata_building <- cbind(traindata_pcd, i=traindata$BUILDINGID)
h2o_traindata_building <- as.h2o(traindata_building)
valdata_building <- cbind(valdata_pcd, i=valdata$BUILDINGID)
h2o_valdata_building <- as.h2o(valdata_building)
h2o_initbuild <- h2o.randomForest(y = 'i', training_frame = h2o_traindata_building, validation_frame = h2o_valdata_building,
ntrees = 200, max_depth = 50)
h2o_building_predicts <- h2o.predict(h2o_initbuild, h2o_valdata_building)
building_predicts <- as.data.frame(h2o_building_predicts)
valdata$building_predicted <- building_predicts$predict
valdata$building_predicted <- factor(valdata$building_predicted)
valdata$building_predicted
predictornames <- colnames(traindata_pcd[,1:numpc])
traindata_pcd2 <- cbind(traindata_pcd, traindata[,521:529])
valdata_pcd2 <- cbind(valdata_pcd, valdata[,521:530])
train_bybuilding_list <- list()
val_bybuilding_list <- list()
for (i in unique(traindata_pcd2$BUILDINGID)){
train_bybuilding_list[[i]] <- subset(traindata_pcd2, BUILDINGID == i)
}
for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_train_bybuilding_list <- lapply(train_bybuilding_list, as.h2o)
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
h2o_gbm_lat_b2 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lat_b0 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lat_b1 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_fl_b2 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_fl_b0 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_fl_b1 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_lon_b2 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lon_b0 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lon_b1 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
val_bybuilding_list <- list()
for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)$predict
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)$predict
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
valdata_finalpreds$err_floor <- abs(as.numeric(valdata_finalpreds$FLOOR) - as.numeric(valdata_finalpreds$floor_predict))
valdata_finalpreds$err_building <- abs(as.numeric(levels(valdata_finalpreds$BUILDINGID))[valdata_finalpreds$BUILDINGID]
- as.numeric(levels(valdata_finalpreds$building_predicted))[valdata_finalpreds$building_predicted])
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_total <- valdata_finalpreds$err_distance + 4*valdata_finalpreds$err_floor + 50*valdata_finalpreds$err_building
summary(valdata_finalpreds$err_total)
View(valdata_finalpreds)
plot(valdata_finalpreds$LATITUDE, valdata_finalpreds$LONGITUDE, col = valdata_finalpreds$err_floor)
plot(valdata_finalpreds$LATITUDE, valdata_finalpreds$LONGITUDE, col = valdata_finalpreds$err_floor + 1)
plot(valdata_finalpreds$LATITUDE, valdata_finalpreds$LONGITUDE, col = round(valdata_finalpreds$err_distance))
valdata_finalpreds$err_total_round <- factor(round(valdata_finalpreds$err_total))
View(valdata_finalpreds)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_total_round, type = 'scatter3d')
library(plotly)
valdata_finalpreds$err_total_round <- factor(round(valdata_finalpreds$err_total))
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_total_round, type = 'scatter3d')
valdata_finalpreds$err_dist_round <- factor(round(valdata_finalpreds$err_distance))
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d')
max(valdata_finalpreds$err_distance)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_floor, type = 'scatter3d')
valdata_finalpreds$err_floor
is.factor(valdata_finalpreds$err_floor)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~factor(err_floor), type = 'scatter3d')
valdata_finalpreds$err_dist_round <- factor(round(valdata_finalpreds$err_distance/5))
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d')
hist(valdata_finalpreds$err_distance)
hist(valdata_finalpreds$err_distance, breaks = 50)
?mutate_if
valdata_finalpreds$err_dist_round <- factor(1)
valdata_finalpreds$err_dist_round <- factor(1)
if (valdata_finalpreds < 5){
valdata_finalpreds$err_dist_round <- '<5'
} else if (valdata_finalpreds$err_dist_round < 15) {
valdata_finalpreds$err_dist_round <- '5<<15'
} else if (valdata_finalpreds$err_dist_round < 25) {
valdata_finalpreds$err_dist_round <- '15<<25'
} else {
valdata_finalpreds$err_dist_round <- '25<'
}
valdata_finalpreds$err_dist_round <- factor(1)
if (valdata_finalpreds < 5){
valdata_finalpreds$err_dist <- '<5'
} else if (valdata_finalpreds$err_dist_round < 15) {
valdata_finalpreds$err_dist <- '5<<15'
} else if (valdata_finalpreds$err_dist_round < 25) {
valdata_finalpreds$err_dist <- '15<<25'
} else {
valdata_finalpreds$err_dist <- '25<'
}
valdata_finalpreds$err_dist_round <- factor(1)
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round <- '<5'
} else if (valdata_finalpreds$err_distance < 15) {
valdata_finalpreds$err_dist_round <- '5<<15'
} else if (valdata_finalpreds$err_distance < 25) {
valdata_finalpreds$err_dist_round <- '15<<25'
} else {
valdata_finalpreds$err_dist_round <- '25<'
}
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_dist_round <- factor(1)
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round <- '<5'
} else if (valdata_finalpreds$err_distance < 15) {
valdata_finalpreds$err_dist_round <- '5<<15'
} else if (valdata_finalpreds$err_distance < 25) {
valdata_finalpreds$err_dist_round <- '15<<25'
} else {
valdata_finalpreds$err_dist_round <- '25<'
}
valdata_finalpreds$err_dist_round <- factor(1)
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round <- '<5'
} else if (valdata_finalpreds$err_distance < 15) {
valdata_finalpreds$err_dist_round <- '5<<15'
} else if (valdata_finalpreds$err_distance < 25) {
valdata_finalpreds$err_dist_round <- '15<<25'
} else {
valdata_finalpreds$err_dist_round <- '25<'
}
valdata_finalpreds$err_distance < 5
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round <- '<5'
}
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round = '<5'
}
if (valdata_finalpreds$err_distance < 5){
valdata_finalpreds$err_dist_round = '<<5'
}
if (valdata_finalpreds$err_distance < 5)
{valdata_finalpreds$err_dist_round = '<<5'}
valdata_finalpreds$err_dist_round <- round(valdata_finalpreds/5)
valdata_finalpreds$err_dist_round <- round(valdata_finalpreds$err_distance/5)
?cut.H2OFrame
?cut
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 5)
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 8)
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 10)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d')
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d', size = 0.2)
library(tidyverse)
library(h2o)
traindata <- read.csv(file = 'trainingData.csv')
valdata <- read.csv('validationData.csv')
valdata$FLOOR <- factor(valdata$FLOOR)
valdata$BUILDINGID <- factor(valdata$BUILDINGID)
traindata$FLOOR <- factor(traindata$FLOOR)
traindata$BUILDINGID <- factor(traindata$BUILDINGID)
traindata_loc <- traindata[,1:520]
valdata_loc <- valdata[,1:520]
traindata_loc[traindata_loc == 100] = -105
valdata_loc[valdata_loc == 100] = -105
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = F)))
#traindata_loc <- traindata_loc + 105
traindata_loc[is.na(traindata_loc)] = 0
valdata_loc_cs <- t(scale(t(valdata_loc), center = T, scale = F))
#valdata_loc_cs <- valdata_loc + 105
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
###pca and selectinbg the first 50 (changeable by changing numpc value) components
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
numpc <- 100 ###IMPORTANT PARMETER! DEFINES THE NUMBER OF PCs TO TAKE INTO ACCOUNT.
traindata_pcd <- data.frame(pcatest$x[,1:numpc])
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:numpc])
###a model for building, predicting on val
h2o.init()
traindata_building <- cbind(traindata_pcd, i=traindata$BUILDINGID)
h2o_traindata_building <- as.h2o(traindata_building)
valdata_building <- cbind(valdata_pcd, i=valdata$BUILDINGID)
h2o_valdata_building <- as.h2o(valdata_building)
h2o_initbuild <- h2o.randomForest(y = 'i', training_frame = h2o_traindata_building, validation_frame = h2o_valdata_building,
ntrees = 200, max_depth = 50)
h2o_building_predicts <- h2o.predict(h2o_initbuild, h2o_valdata_building)
building_predicts <- as.data.frame(h2o_building_predicts)
valdata$building_predicted <- building_predicts$predict
valdata$building_predicted <- factor(valdata$building_predicted)
###split datasets, run models for each
predictornames <- colnames(traindata_pcd[,1:numpc])
traindata_pcd2 <- cbind(traindata_pcd, traindata[,521:529])
valdata_pcd2 <- cbind(valdata_pcd, valdata[,521:530])
train_bybuilding_list <- list()
val_bybuilding_list <- list()
for (i in unique(traindata_pcd2$BUILDINGID)){
train_bybuilding_list[[i]] <- subset(traindata_pcd2, BUILDINGID == i)
}
for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_train_bybuilding_list <- lapply(train_bybuilding_list, as.h2o)
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
#h2o_gbm_lat <- map2 (h2o_train_bybuilding_list, h2o_val_bybuilding_list,
#                     function(xxx,yyy) h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = xxx, validation_frame = yyy))
h2o_gbm_lat_b2 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lat_b0 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lat_b1 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_fl_b2 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_fl_b0 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_fl_b1 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_lon_b2 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lon_b0 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lon_b1 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
###make predicts
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)$predict
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)$predict
####error analysis
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
valdata_finalpreds$err_floor <- abs(as.numeric(valdata_finalpreds$FLOOR) - as.numeric(valdata_finalpreds$floor_predict))
valdata_finalpreds$err_building <- abs(as.numeric(levels(valdata_finalpreds$BUILDINGID))[valdata_finalpreds$BUILDINGID]
- as.numeric(levels(valdata_finalpreds$building_predicted))[valdata_finalpreds$building_predicted])
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_total <- valdata_finalpreds$err_distance + 4*valdata_finalpreds$err_floor + 50*valdata_finalpreds$err_building
summary(valdata_finalpreds$err_total)
library(plotly)
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 10)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d', size = 0.2)
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 8)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, type = 'scatter3d', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, colorscale = 'Viridis', type = 'scatter3d', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~err_dist_round, marker = list(colorscale = 'Viridis'), type = 'scatter3d', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, marker = list(colorscale = 'Viridis', size = 0.2))
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'BrBG', size = 0.2))
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'BrBG', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'Blues', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'YlOrRd', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'PRGn', size = 0.2)
valdata_finalpreds$err_dist_round <- cut(valdata_finalpreds$err_distance, breaks = 11)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'PRGn', size = 0.2)
plot_ly(valdata_finalpreds, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,  type = 'scatter3d',
color = ~err_dist_round, colors = 'Spectral', size = 0.2)
library(caret)
traindata <- read.csv(file = 'trainingData.csv')
valdata <- read.csv('validationData.csv')
traindata <- rbind(traindata, valdata)
valdata$FLOOR <- factor(valdata$FLOOR)
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
trainindex <- createDataPartition(traindata$WAP001, p=0.03)
testindex <- createDataPartition(traindata$WAP001, p=0.03)
testindex <- createDataPartition(traindata$WAP001, p=0.03, list = FALSE)
View(testindex)
testindex <- createDataPartition(traindata$WAP001, p=0.03, list = FALSE)
traindata <- traindata[-testindex]
traindata_loc <- traindata_loc[-testindex]
valdata <- traindata[testindex]
valdata_loc <- valdata_loc[-testindex]
traindata <- read.csv(file = 'trainingData.csv')
valdata <- read.csv('validationData.csv')
traindata <- rbind(traindata, valdata)
valdata$FLOOR <- factor(valdata$FLOOR)
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
###take a small testing set out for final final validation
testindex <- createDataPartition(traindata$WAP001, p=0.03, list = FALSE)
traindata <- traindata[-testindex,]
traindata_loc <- traindata_loc[-testindex,]
valdata <- traindata[testindex,]
valdata_loc <- valdata_loc[-testindex,]
valdata_loc <- traindata_loc[-testindex,]
valdata_loc <- traindata_loc[testindex,]
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
numpc <- 100 ###IMPORTANT PARMETER! DEFINES THE NUMBER OF PCs TO TAKE INTO ACCOUNT.
traindata_pcd <- data.frame(pcatest$x[,1:numpc])
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = F)))
#traindata_loc <- traindata_loc + 105
traindata_loc[is.na(traindata_loc)] = 0
valdata_loc_cs <- t(scale(t(valdata_loc), center = T, scale = F))
#valdata_loc_cs <- valdata_loc + 105
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
numpc <- 100 ###IMPORTANT PARMETER! DEFINES THE NUMBER OF PCs TO TAKE INTO ACCOUNT.
traindata_pcd <- data.frame(pcatest$x[,1:numpc])
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:numpc])
###a model for building, predicting on val
h2o.init()
traindata_building <- cbind(traindata_pcd, i=traindata$BUILDINGID)
h2o_traindata_building <- as.h2o(traindata_building)
valdata_building <- cbind(valdata_pcd, i=valdata$BUILDINGID)
h2o_valdata_building <- as.h2o(valdata_building)
h2o_initbuild <- h2o.randomForest(y = 'i', training_frame = h2o_traindata_building, validation_frame = h2o_valdata_building,
ntrees = 200, max_depth = 50)
h2o_building_predicts <- h2o.predict(h2o_initbuild, h2o_valdata_building)
building_predicts <- as.data.frame(h2o_building_predicts)
valdata$building_predicted <- building_predicts$predict
valdata$building_predicted <- factor(valdata$building_predicted)
###split datasets, run models for each
predictornames <- colnames(traindata_pcd[,1:numpc])
traindata_pcd2 <- cbind(traindata_pcd, traindata[,521:529])
valdata_pcd2 <- cbind(valdata_pcd, valdata[,521:530])
train_bybuilding_list <- list()
val_bybuilding_list <- list()
for (i in unique(traindata_pcd2$BUILDINGID)){
train_bybuilding_list[[i]] <- subset(traindata_pcd2, BUILDINGID == i)
}
for (i in unique(valdata$building_predicted)){
val_bybuilding_list[[i]] <- subset(valdata_pcd2, building_predicted == i)
}
h2o_train_bybuilding_list <- lapply(train_bybuilding_list, as.h2o)
h2o_val_bybuilding_list <- lapply(val_bybuilding_list, as.h2o)
#h2o_gbm_lat <- map2 (h2o_train_bybuilding_list, h2o_val_bybuilding_list,
#                     function(xxx,yyy) h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = xxx, validation_frame = yyy))
h2o_gbm_lat_b2 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lat_b0 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lat_b1 <- h2o.gbm(x = predictornames, y = 'LATITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_fl_b2 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_fl_b0 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_fl_b1 <- h2o.gbm(x = predictornames, y = 'FLOOR', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
h2o_gbm_lon_b2 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`2`, validation_frame = h2o_val_bybuilding_list$`2`)
h2o_gbm_lon_b0 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`0`, validation_frame = h2o_val_bybuilding_list$`0`)
h2o_gbm_lon_b1 <- h2o.gbm(x = predictornames, y = 'LONGITUDE', training_frame = h2o_train_bybuilding_list$`1`, validation_frame = h2o_val_bybuilding_list$`1`)
###make predicts
h2o_val_bybuilding_list$`2`$lon_predict <- h2o.predict(h2o_gbm_lon_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lon_predict <- h2o.predict(h2o_gbm_lon_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lon_predict <- h2o.predict(h2o_gbm_lon_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$lat_predict <- h2o.predict(h2o_gbm_lat_b2, h2o_val_bybuilding_list$`2`)
h2o_val_bybuilding_list$`0`$lat_predict <- h2o.predict(h2o_gbm_lat_b0, h2o_val_bybuilding_list$`0`)
h2o_val_bybuilding_list$`1`$lat_predict <- h2o.predict(h2o_gbm_lat_b1, h2o_val_bybuilding_list$`1`)
h2o_val_bybuilding_list$`2`$floor_predict <- h2o.predict(h2o_gbm_fl_b2, h2o_val_bybuilding_list$`2`)$predict
h2o_val_bybuilding_list$`0`$floor_predict <- h2o.predict(h2o_gbm_fl_b0, h2o_val_bybuilding_list$`0`)$predict
h2o_val_bybuilding_list$`1`$floor_predict <- h2o.predict(h2o_gbm_fl_b1, h2o_val_bybuilding_list$`1`)$predict
####error analysis
valdata_finalpreds <- rbind(as.data.frame(h2o_val_bybuilding_list$`2`), as.data.frame(h2o_val_bybuilding_list$`1`), as.data.frame(h2o_val_bybuilding_list$`0`))
valdata_finalpreds$err_floor <- abs(as.numeric(valdata_finalpreds$FLOOR) - as.numeric(valdata_finalpreds$floor_predict))
valdata_finalpreds$err_building <- abs(as.numeric(levels(valdata_finalpreds$BUILDINGID))[valdata_finalpreds$BUILDINGID]
- as.numeric(levels(valdata_finalpreds$building_predicted))[valdata_finalpreds$building_predicted])
valdata_finalpreds$err_distance <- sqrt((valdata_finalpreds$LONGITUDE - valdata_finalpreds$lon_predict)^2 +
(valdata_finalpreds$LATITUDE - valdata_finalpreds$lat_predict)^2)
valdata_finalpreds$err_total <- valdata_finalpreds$err_distance + 4*valdata_finalpreds$err_floor + 50*valdata_finalpreds$err_building
summary(valdata_finalpreds$err_total)
