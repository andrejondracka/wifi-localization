class(merged)
class(mergedpredsval)
merged <- as.data.frame(merged)
merged2 <- rbind(merged, mergedpredsval)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin
type = 'scatter3d', size = 0.2)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin,
type = 'scatter3d', size = 0.2)
View(merged2)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
merged <- merged[,c('LONGITUDE', 'LATITUDE', 'FLOOR', 'origin')]
merged$origin <- factor(merged$origin)
merged <- as.data.frame(merged)
merged2 <- rbind(merged, mergedpredsval)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin,
type = 'scatter3d', size = 0.2)
confusionMatrix(preds_knn_pca_onval$FLOOR, valdata$FLOOR)
mergedpredsval$FLOOR <- as.numeric(mergedpredsval$FLOOR)
merged2 <- rbind(merged, mergedpredsval)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
traindata_loc <- scale(t(traindata_loc), center = T, scale = T)
View(traindata_loc)
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
traindata_loc <- t(scale(t(traindata_loc), center = T, scale = T))
View(traindata_loc)
View(traindata)
min(traindata[5,1:520])
sd(traindata[5,1:520])
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
pcatests <- prcomp(traindata_loc, center = F, scale. = F)
pcatest <- prcomp(traindata_loc)
pcatest <- base::prcomp(traindata_loc)
?prcomp
pcatest <- prcomp(traindata_loc, scale. = F)
debug(prcomp)
prcomp
view(prcomp)
fix(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
pcatest <- prcomp(traindata_loc, scale. = F)
debug(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
q
plot(pcatest$sdev/sum(pcatest$sdev))
pcatest <- prcomp(traindata_loc, scale. = F)
undebug(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
pcatest <- prcomp(traindata_loc, scale. = F)
undebug(prcomp)
attr(traindata_loc)
attr(traindata_loc, "scaled:scale")
edit(prcomp)
traindata_loc2 <- na.omit(traindata_loc)
traindata_loc2 <- as.data.frame(na.omit(traindata_loc))
pcatest <- prcomp(traindata_loc2, scale. = F)
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
pcatest <- prcomp(traindata_loc, scale. = F)
traindata_loc[is.na(traindata_loc)] = 0
pcatest <- prcomp(traindata_loc, scale. = F)
plot(pcatest$sdev/sum(pcatest$sdev))
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
plot(pcatest$x[,1], pcatest$x[,2])
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
pcad_data50 <- data.frame(pcatest$x[,1:50])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
h2o.init()
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_testdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o.hit_ratio_table(h2o_rfs$FLOOR)
h2o_rfs$LONGITUDE
h2o_rfs_val$LONGITUDE@model$cross_validation_holdout_predictions_frame_id
h2o_rfs_val$LONGITUDE@model
h2o_rfs_val$LONGITUDE@model$variable_importances
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
h2o_val_predicts$LONGITUDE
metrics::RMSE(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::RMSE(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::rmse(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::rmse(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
plot(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
valdata <- read_csv('validationData.csv')
valdata$FLOOR <- factor(valdata$FLOOR, ordered = FALSE)
valdata_loc <- valdata[,1:520]
valdata_loc[valdata_loc == 100] = -105
View(valdata_loc)
valdata_loc_cs <- t(scale(t(valdata_loc)))
View(valdata_loc_cs)
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
h2o_valdatasets <- list()
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
Metrics::rmse(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
Metrics::rmse(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
plot(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
valdata$LONGITUDE
h2o_val_predicts$LONGITUDE
plot(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
Metrics::rmse(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
Metrics::rmse(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$FLOOR, as.vector(h2o_val_predicts$FLOOR))
confusionMatrix(valdata$FLOOR, h2o_val_predicts$FLOOR
plot(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
plot(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$FLOOR, as.vector(h2o_val_predicts$FLOOR))
h2o_val_predicts$FLOOR
plot(h2o_val_predicts$LONGITUDE, h2o_val_predicts$LATITUDE)
plot(as.vector(h2o_val_predicts$LONGITUDE), as.vector(h2o_val_predicts$LATITUDE))
h2o_rfs_val$LONGITUDE@have_mojo
h2o_rfs_val$LONGITUDE@model$names
h2o_rfs_val$LONGITUDE@model$column_types
h2o_rfs_val$LONGITUDE@model$domains
h2o_rfs_val$LONGITUDE@model$validation_metrics
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
valdata_pcd <- valdata_pcd[,1:50]
View(valdata_pcd)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_valdatasets$FLOOR
h2o_valdatasets$LONGITUDE
h2o_valdatasets$LATITUDE
h2o_valdatasets$LATITUDE$LATITUDE
Metrics::rmse(as.vector(h2o_valdatasets$LATITUDE$LATITUDE), as.vector(h2o_val_predicts$LATITUDE))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, 'i' = valdata[,i]))
}
h2o_valdatasets$FLOOR
h2o_traindatasets$LONGITUDE
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, 'i' = valdata[,i]))
}
h2o_traindatasets$LONGITUDE
h2o_valdatasets$FLOOR
h2o_valdatasets <- list()
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
valdata_pcd <- valdata_pcd[,1:50]
View(valdata)
traindata_train
valdata
str(valdata)
str(traindata_train)
valdata <- as.data.frame(valdata)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
valdata$FLOOR
traindata_train$FLOOR
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = factor(valdata[,i])))
}
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
str(h2o_valdatasets$FLOOR$i)
str(h2o_traindatasets$FLOOR$i)
valdata$FLOOR
is.factor(valdata$FLOOR)
h2o_valdatasets$FLOOR$i <- factor(h2o_valdatasets$FLOOR$i)
valdata$FLOOR <- factor(valdata$FLOOR)
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR$i
is.factor(h2o_valdatasets$FLOOR$i)
is.factor(h2o_traindatasets$FLOOR$i)
is.data.frame(valdata)
is.data.frame(traindata_train)
is.data.frame(traindata_test)
h2o_testdatasets$FLOOR$i
is.factor(h2o_testdatasets$FLOOR$i)
is.factor(h2o_testdatasets$LONGITUDE$i)
valdata <- read_csv('validationData.csv')
valdata <- read.csv('validationData.csv')
is.data.frame(valdata)
valdata$FLOOR <- factor(valdata$FLOOR)
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
is.factor(h2o_valdatasets$FLOOR$i)
is.factor(h2o_testdatasets$FLOOR$i)
i = valdata[,'FLOOR']
is.factor(i)
ttt <- cbind(valdata_pcd, i = valdata[,'FLOOR'])
is.factor(ttt$FLOOR)
is.factor(ttt$i)
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
is.factor(h2o_valdatasets$FLOOR$i)
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_rfs_val$FLOOR
h2o_rfs_val$LATITUDE
h2o_rfs_val$LONGITUDE
library(superheat)
library(tidyverse)
library(caret)
library(Metrics)
library(h2o)
library(plotly)
traindata <- read.csv(file = 'trainingData.csv')
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
#sds <- apply(traindata_loc, 2, sd)
#topsdhotspots <- order(sds, decreasing = TRUE)[1:30]
#sdsnonzeros <- sds != 0
#traindata_loc <- traindata_loc[,sdsnonzeros]
###pca
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
traindata_loc[is.na(traindata_loc)] = 0
pcatest <- prcomp(traindata_loc, scale. = F)
plot(pcatest$sdev/sum(pcatest$sdev))
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
plot(pcatest$x[,1], pcatest$x[,2])
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
pcad_data50 <- data.frame(pcatest$x[,1:50])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
h2o.init()
h2o_traindatasets <- list()
h2o_testdatasets <- list()
#h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
#h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
valdata <- read.csv('validationData.csv')
###take the data and transform it by removing the useless routers from train set and plus transform using the same components
valdata$FLOOR <- factor(valdata$FLOOR)
valdata_loc <- valdata[,1:520]
valdata_loc[valdata_loc == 100] = -105
valdata_loc_cs <- t(scale(t(valdata_loc)))
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
h2o_valdatasets <- list()
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
h2o_rfs_val$LATITUDE
h2o_rfs_val$LONGITUDE
h2o_rfs_val$FLOOR
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
traindata <- read.csv(file = 'trainingData.csv')
traindata_loc <- traindata[,1:520]
#traindata_loc[traindata_loc == 100] = -105
#sds <- apply(traindata_loc, 2, sd)
#topsdhotspots <- order(sds, decreasing = TRUE)[1:30]
#sdsnonzeros <- sds != 0
#traindata_loc <- traindata_loc[,sdsnonzeros]
###pca
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
traindata_loc[is.na(traindata_loc)] = 0
pcatest <- prcomp(traindata_loc, scale. = F)
valdata <- read.csv('validationData.csv')
###take the data and transform it by removing the useless routers from train set and plus transform using the same components
valdata$FLOOR <- factor(valdata$FLOOR)
valdata_loc <- valdata[,1:520]
#valdata_loc[valdata_loc == 100] = -105
#valsds <- apply(valdata_loc, 2, sd)
valdata_loc_cs <- t(scale(t(valdata_loc)))
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
h2o_rfs_val$FLOOR
h2o_rfs_val$LONGITUDE
View(valdata_loc_cs)
h2o_rfs_val$LATITUDE
View(valdata_loc_cs)
View(valdata)
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
View(valdata_pcd)
plot(valdata_pcd[,1], valdata_pcd[,2])
plot(valdata_pcd[,3], valdata_pcd[,2])
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
Metrics::rmse(as.vector(h2o_valdatasets$LATITUDE$LATITUDE), as.vector(h2o_val_predicts$LATITUDE))
Metrics::rmse(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
plot(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
pcad_traindatasets <- list()
pcad_testdatasets <- list()
pcad_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
pcad_testdatasets[[i]] <- cbind(valdata_pcd, i = valdata[,i])
}
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(pcad_traindatasets)
h2o_testdatasets[[i]] <- as.h2o(pcad_testdatasets)
h2o_valdatasets[[i]] <- as.h2o(pcad_valdatasets)
}
pcad_traindatasets <- list()
pcad_testdatasets <- list()
pcad_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
pcad_valdatasets[[i]] <- cbind(valdata_pcd, i = valdata[,i])
}
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(pcad_traindatasets)
h2o_testdatasets[[i]] <- as.h2o(pcad_testdatasets)
h2o_valdatasets[[i]] <- as.h2o(pcad_valdatasets)
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
pcad_valdatasets[[i]] <- cbind(valdata_pcd, i = valdata[,i])
}
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(pcad_traindatasets)
h2o_testdatasets[[i]] <- as.h2o(pcad_testdatasets)
h2o_valdatasets[[i]] <- as.h2o(pcad_valdatasets)
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
pcad_valdatasets$LONGITUDE
pcad_valdatasets$FLOOR
pcad_testdatasets$FLOOR
pcad_traindatasets$FLOOR
pcad_traindatasets$LONGITUDE
view(h2o_valdatasets$FLOOR)
view(pcad_valdatasets$FLOOR)
view(h2o_traindatasets$FLOOR)
h2o_traindatasets <- lapply(pcad_traindatasets, function(x) as.h2o(x))
view(h2o_traindatasets$FLOOR)
h2o_traindatasets <- lapply(pcad_traindatasets, function(x) as.h2o(x))
h2o_testdatasets <- lapply(pcad_testdatasets, function(x) as.h2o(x))
h2o_valdatasets <- lapply(pcad_valdatasets, function(x) as.h2o(x))
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
h2o_rfs_val$LONGITUDE
library(superheat)
library(tidyverse)
library(caret)
library(Metrics)
library(h2o)
library(plotly)
traindata <- read.csv(file = 'trainingData.csv')
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
###pca
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
traindata_loc[is.na(traindata_loc)] = 0
pcatest <- prcomp(traindata_loc, scale. = F)
plot(pcatest$sdev/sum(pcatest$sdev))
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
plot(pcatest$x[,1], pcatest$x[,2])
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
####pca'd model
pcad_data50 <- data.frame(pcatest$x[,1:50])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
####old models####
pcad_traindatasets <- list()
pcad_testdatasets <- list()
pcad_valdatasets <- list()
valdata <- read.csv('validationData.csv')
###take the data and transform it by removing the useless routers from train set and plus transform using the same components
valdata$FLOOR <- factor(valdata$FLOOR)
valdata_loc <- valdata[,1:520]
valdata_loc[valdata_loc == 100] = -105
#valsds <- apply(valdata_loc, 2, sd)
valdata_loc_cs <- t(scale(t(valdata_loc)))
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
pcad_valdatasets[[i]] <- cbind(valdata_pcd, i = valdata[,i])
}
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
h2o_traindatasets <- lapply(pcad_traindatasets, function(x) as.h2o(x))
h2o_testdatasets <- lapply(pcad_testdatasets, function(x) as.h2o(x))
h2o_valdatasets <- lapply(pcad_valdatasets, function(x) as.h2o(x))
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
h2o_rfs_val$LONGITUDE
h2o_rfs_val$LATITUDE
h2o_rfs_val$LONGITUDE
pcad_data50 <- data.frame(pcatest$x[,1:100])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
pcad_traindatasets <- list()
pcad_testdatasets <- list()
pcad_valdatasets <- list()
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
valdata_pcd <- as.data.frame(valdata_pcd[,1:100])
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
pcad_valdatasets[[i]] <- cbind(valdata_pcd, i = valdata[,i])
}
h2o_traindatasets <- lapply(pcad_traindatasets, function(x) as.h2o(x))
h2o_testdatasets <- lapply(pcad_testdatasets, function(x) as.h2o(x))
h2o_valdatasets <- lapply(pcad_valdatasets, function(x) as.h2o(x))
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500, max_depth = 70))
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
