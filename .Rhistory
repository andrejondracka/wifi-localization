?prcomp
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
pcatest <- prcomp(traindata_loc, center = FALSE, scale. = FALSE)
pcatest <- prcomp(traindata_loc)#, center = FALSE, scale. = FALSE)
traindata_loc <- scale(traindata_loc, center = T, scale = T)
traindata_loc[is.na(traindata_loc)] = 0.0001
pcatest <- prcomp(traindata_loc, center = FALSE, scale. = FALSE)
pcatest <- prcomp(traindata_loc, center = TRUE, scale. = FALSE)
traindata_loc <- scale(traindata_loc, center = T, scale = T)
traindata_loc[is.na(traindata_loc)] = sample(c(0.0001, -0.0001),1)
pcatest <- prcomp(traindata_loc, center = FALSE, scale. = FALSE)
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
plot(pcatest$sdev/sum(pcatest$sdev))
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
pcatest$x
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
pcad_data50 <- data.frame(pcatest$x[,1:50])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata$FLOOR <- factor(traindata$FLOOR, ordered  = T)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
pcad_traindatasets <- list()
pcad_testdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- cbind(pcad_d50_train, i = traindata_train[,i])
pcad_testdatasets[[i]] <- cbind(pcad_d50_test, i = traindata_test[,i])
}
rfmodels_pca <- lapply(pcad_traindatasets, function(x) train(i ~ ., x, method = 'ranger'))
knnneighbors_pca <- lapply(pcad_traindatasets, function(x) train(i ~ ., x, method = 'knn'))
preds_rf_pca <- lapply(rfmodels_pca, function(x) predict(x, pcad_d50_test))
preds_knn_pca <- lapply(knnneighbors_pca, function(x) predict(x, pcad_d50_test))
confusionMatrix(preds_rf_pca$FLOOR, traindata_test$FLOOR)
Metrics::rmse(preds_rf_pca$LONGITUDE, traindata_test$LONGITUDE)
plot(preds_rf_pca$LONGITUDE, traindata_test$LONGITUDE)
Metrics::rmse(preds_rf_pca$LATITUDE, traindata_test$LATITUDE)
plot(preds_rf_pca$LATITUDE, traindata_test$LATITUDE)
valdata <- read_csv('validationData.csv')
valdata$FLOOR <- factor(valdata$FLOOR, ordered = TRUE)
valdata_loc <- valdata[,1:520]
valdata_loc_cs <- scale(valdata_loc)
valdata_loc[valdata_loc == 100] = -105
View(valdata_loc)
valdata_loc_cs <- scale(valdata_loc)
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
preds_rf_pca_onval <- lapply(rfmodels_pca, function(x) predict(x, valdata_pcd))
preds_knn_pca_onval <- lapply(knnneighbors_pca, function(x) predict(x, valdata_pcd))
confusionMatrix(preds_rf_pca_onval$FLOOR, valdata$FLOOR)
Metrics::rmse(preds_rf_pca_onval$LONGITUDE, valdata$LONGITUDE)
plot(preds_rf_pca_onval$LONGITUDE, valdata$LONGITUDE)
Metrics::rmse(preds_rf_pca_onval$LATITUDE, valdata$LATITUDE)
plot(preds_rf_pca_onval$LATITUDE, valdata$LATITUDE)
confusionMatrix(preds_knn_pca_onval$FLOOR, valdata$FLOOR)
Metrics::rmse(preds_knn_pca_onval$LONGITUDE, valdata$LONGITUDE)
plot(preds_knn_pca_onval$LONGITUDE, valdata$LONGITUDE)
Metrics::rmse(preds_knn_pca_onval$LATITUDE, valdata$LATITUDE)
plot(preds_knn_pca_onval$LATITUDE, valdata$LATITUDE)
confusionMatrix(preds_knn_pca$FLOOR, traindata_test$FLOOR)
Metrics::rmse(preds_knn_pca$LONGITUDE, traindata_test$LONGITUDE)
plot(preds_knn_pca$LONGITUDE, traindata_test$LONGITUDE)
Metrics::rmse(preds_knn_pca$LATITUDE, traindata_test$LATITUDE)
plot(preds_knn_pca$LATITUDE, traindata_test$LATITUDE)
save (rfmodels_pca, knnneighbors_pca, file = 'rf_knn_pca_models.RData')
h2o_init()
h2o.init()
library(h2o)
h2o.init()
plot(preds_rf_pca_onval$LONGITUDE, valdata$LONGITUDE)
plot(preds_knn_pca_onval$LONGITUDE, valdata$LONGITUDE)
install.packages(plotly)
install.packages('plotly')
library(plotly)
hist(traindata$PHONEID)
hist(traindata$PHONEID, breaks = 23)
plot(preds_knn_pca$LATITUDE[traindata_test$PHONEID == 12], traindata_test$LATITUDE[traindata_test$PHONEID == 12])
preds_knn_pca$LATITUDE[traindata_test$PHONEID == 12]
preds_knn_pca$LATITUDE
traindata_test$PHONEID==12
plot(preds_knn_pca$LATITUDE[traindata_test$PHONEID == 13], traindata_test$LATITUDE[traindata_test$PHONEID == 13])
?h20.drf
?h20.glm
?h20.init
h20.init()
?h2o.glm
?h2o.drf
?h2o.randomForest
h2o_rfs <- list()
h2o_rfs <- lapply (pcad_traindatasets,
function(x) h2o.randomForest(y = x, ntrees = 500))
h2o_rfs <- lapply (pcad_traindatasets,
function(x) h2o.randomForest(y = i, training_frame = x, ntrees = 500))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
pcad_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
pcad_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
}
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
}
h2o_traindatasets <- list()
h2o_testdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
}
str(traindata_train$FLOOR)
traindata$FLOOR <- factor(traindata$FLOOR, ordered = F)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
str(traindata_train$FLOOR)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
}
h2o_rfs <- lapply (h2o_traindatasets,
function(x) h2o.randomForest(y = i, training_frame = x, ntrees = 500))
view(h2o_traindatasets$LONGITUDE)
view(h2o_traindatasets$LATITUDE)
view(h2o_traindatasets$FLOOR)
h2o_rfs <- lapply (h2o_traindatasets,
function(x) h2o.randomForest(y = i, training_frame = x, ntrees = 500))
h2orf_lat <- h2o.randomForest(y = i, training_frame = h2o_traindatasets$LONGITUDE, ntrees = 500)
h2orf_lat <- h2o.randomForest(y = 'i', training_frame = h2o_traindatasets$LONGITUDE, ntrees = 500)
h2o_rfs <- lapply (h2o_traindatasets,
function(x) h2o.randomForest(y = 'i', training_frame = x, ntrees = 500))
h2o_rfs <- map2 (h2o_traindatasets, h2o_testdatasets,
function(x) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_rfs <- map2 (h2o_traindatasets, h2o_testdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_rfs$FLOOR
h2o.hit_ratio_table(h2o_rfs$FLOOR)
h2o.hit_ratio_table(h2o_rfs$LATITUDE)
h2o_rfs$LATITUDE
h2o_rfs$LONGITUDE
h2o_rfs_val <- map2 (h2o_traindatasets, valdata_pcd,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
valdata$FLOOR <- factor(valdata$FLOOR, ordered = FALSE)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
plot_ly(df = traindata, x = ~LONGITUDE, y = ~LATITUDE)
plot_ly(df = traindata, x = ~ LONGITUDE, y = ~ LATITUDE)
plot_ly(df = traindata, x = ~ WAP096, y = ~ WAP097)
library(plotly)
plot_ly(df = traindata, x = ~ LONGITUDE, y = ~ LATITUDE)
plot_ly(df = traindata, x = ~ 'LONGITUDE', y = ~ 'LATITUDE')
plot_ly(df = traindata, x = ~ 'LONGITUDE', y = ~ 'LATITUDE', type = 'scatter')
mergeddf <- traindata %>% groupby(LATITUDE, LONGITUDE, FLOOR) %>% sample(n=1)
mergeddf <- traindata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample(n=1)
?sample
mergeddf <- traindata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
mergeddf2 <- valdatadata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
mergeddf2 <- valdata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
merged <- rbind(mergeddf, mergeddf2)
View(merged)
plot_ly(df = merged, x = ~ 'LONGITUDE', y = ~ 'LATITUDE', type = 'scatter')
plot_ly(df = merged, x = ~LONGITUDE, y = ~LATITUDE, type = 'scatter')
merged$LONGITUDE
plot_ly(df = merged, x =~LONGITUDE, y =~LATITUDE, type = 'scatter')
merged$LONGITUDE
plot_ly(df = merged, x = ~LONGITUDE, y = ~LATITUDE, type = 'scatter')
merged$LONGITUDE
?plot_ly
plot_ly(merged, x = ~LONGITUDE, y = ~LATITUDE, type = 'scatter')
plot_ly(merged, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, type = 'scatter')
plot_ly(merged, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, type = 'scatter3d')
plot_ly(merged, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~origin, type = 'scatter3d')
mergeddf <- traindata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
mergeddf$origin <- 'train'
mergeddf <- traindata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
mergeddf$origin <- 'train'
mergeddf2 <- valdata %>% group_by(LATITUDE, LONGITUDE, FLOOR) %>% sample_n(size = 1)
mergeddf2$origin <- 'validation'
merged <- rbind(mergeddf, mergeddf2)
plot_ly(merged, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~origin, type = 'scatter3d')
?boxplot
boxplot(merged[,c('LATITUDE', 'LONGITUDE')])
plot_ly(merged, x = ~LONGITUDE, z = ~origin, type = 'boxplot')
plot_ly(merged, x = ~LONGITUDE, z = ~origin, type = 'box')
plot_ly(merged, x = ~LONGITUDE, color = ~origin, type = 'box')
boxplot(mergeddf$LATITUDE, mergeddf2$LATITUDE)
boxplot(mergeddf$LATITUDE, mergeddf2$LATITUDE, merged$LATITUDE)
plot_ly(merged, x = ~LONGITUDE, color = ~origin, type = 'box')
mergedpredsval <- cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR))
plot_ly(mergedpredsval, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
color = ~origin, type = 'scatter3d')
plot_ly(mergedpredsval, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
type = 'scatter3d')
?plot_ly
plot_ly(mergedpredsval, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
type = 'scatter3d', marker.size = 0.2)
plot_ly(mergedpredsval, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR,
type = 'scatter3d', size = 0.2)
merged <- merged[,c('LONGITUDE', 'LATITUDE', 'FLOOR')]
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
merged <- rbind(mergeddf, mergeddf2)
merged <- merged[,c('LONGITUDE', 'LATITUDE', 'FLOOR', 'origin')]
merged2 <- cbind(merged, mergedpredsval)
merged2 <- rbind(merged, mergedpredsval)
merged <- merged[,c('LONGITUDE', 'LATITUDE', 'FLOOR', 'origin')]
merged2 <- rbind(merged, mergedpredsval)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = as.numeric(preds_rf_pca_onval$LONGITUDE),
LATITUDE = as.numeric(preds_rf_pca_onval$LATITUDE),
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
merged2 <- rbind(merged, mergedpredsval)
View(merged)
View(mergedpredsval)
merged2 <- rbind(merged, mergedpredsval)
merged2 <- as.data.frame(rbind(merged, mergedpredsval))
View(merged2)
merged2 <- rbind(merged, mergedpredsval)
View(merged)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = as.numeric(preds_rf_pca_onval$LONGITUDE),
LATITUDE = as.numeric(preds_rf_pca_onval$LATITUDE),
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
mergedpredsval$LONGITUDE <- as.numeric(mergedpredsval$LONGITUDE)
mergedpredsval$LATITUDE <- as.numeric(mergedpredsval$LATITUDE)
merged2 <- rbind(merged, mergedpredsval)
merged$origin <- factor(merged$origin)
merged2 <- rbind(merged, mergedpredsval)
class(merged2)
class(merged)
class(mergedpredsval)
merged <- as.data.frame(merged)
merged2 <- rbind(merged, mergedpredsval)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin
type = 'scatter3d', size = 0.2)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin,
type = 'scatter3d', size = 0.2)
View(merged2)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
merged <- merged[,c('LONGITUDE', 'LATITUDE', 'FLOOR', 'origin')]
merged$origin <- factor(merged$origin)
merged <- as.data.frame(merged)
merged2 <- rbind(merged, mergedpredsval)
plot_ly(merged2, x = ~LONGITUDE, y = ~LATITUDE, z = ~FLOOR, color = ~origin,
type = 'scatter3d', size = 0.2)
confusionMatrix(preds_knn_pca_onval$FLOOR, valdata$FLOOR)
mergedpredsval$FLOOR <- as.numeric(mergedpredsval$FLOOR)
merged2 <- rbind(merged, mergedpredsval)
mergedpredsval <- as.data.frame(cbind(LONGITUDE = preds_rf_pca_onval$LONGITUDE,
LATITUDE = preds_rf_pca_onval$LATITUDE,
FLOOR = preds_rf_pca_onval$FLOOR,
origin = 'prediction'))
traindata_loc <- scale(t(traindata_loc), center = T, scale = T)
View(traindata_loc)
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
traindata_loc <- t(scale(t(traindata_loc), center = T, scale = T))
View(traindata_loc)
View(traindata)
min(traindata[5,1:520])
sd(traindata[5,1:520])
pcatest <- prcomp(traindata_loc, center = F, scale. = F)
pcatests <- prcomp(traindata_loc, center = F, scale. = F)
pcatest <- prcomp(traindata_loc)
pcatest <- base::prcomp(traindata_loc)
?prcomp
pcatest <- prcomp(traindata_loc, scale. = F)
debug(prcomp)
prcomp
view(prcomp)
fix(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
pcatest <- prcomp(traindata_loc, scale. = F)
debug(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
q
plot(pcatest$sdev/sum(pcatest$sdev))
pcatest <- prcomp(traindata_loc, scale. = F)
undebug(prcomp)
pcatest <- prcomp(traindata_loc, scale. = F)
pcatest <- prcomp(traindata_loc, scale. = F)
undebug(prcomp)
attr(traindata_loc)
attr(traindata_loc, "scaled:scale")
edit(prcomp)
traindata_loc2 <- na.omit(traindata_loc)
traindata_loc2 <- as.data.frame(na.omit(traindata_loc))
pcatest <- prcomp(traindata_loc2, scale. = F)
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
traindata_loc <- traindata[,1:520]
traindata_loc[traindata_loc == 100] = -105
traindata_loc <- as.data.frame(t(scale(t(traindata_loc), center = T, scale = T)))
pcatest <- prcomp(traindata_loc, scale. = F)
traindata_loc[is.na(traindata_loc)] = 0
pcatest <- prcomp(traindata_loc, scale. = F)
plot(pcatest$sdev/sum(pcatest$sdev))
sum(pcatest$sdev[1:50]/sum(pcatest$sdev))
plot(pcatest$x[,1], pcatest$x[,2])
set.seed(66)
trainIndex <- createDataPartition(traindata$BUILDINGID, p = 0.7, list = FALSE)
pcad_data50 <- data.frame(pcatest$x[,1:50])
pcad_d50_train <- pcad_data50[trainIndex, ]
pcad_d50_test <- pcad_data50[-trainIndex, ]
traindata$FLOOR <- factor(traindata$FLOOR)
traindata_train <- traindata[trainIndex, ]
traindata_test <- traindata[-trainIndex, ]
h2o.init()
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_testdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o.hit_ratio_table(h2o_rfs$FLOOR)
h2o_rfs$LONGITUDE
h2o_rfs_val$LONGITUDE@model$cross_validation_holdout_predictions_frame_id
h2o_rfs_val$LONGITUDE@model
h2o_rfs_val$LONGITUDE@model$variable_importances
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
h2o_val_predicts$LONGITUDE
metrics::RMSE(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::RMSE(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::rmse(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
Metrics::rmse(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
plot(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
valdata <- read_csv('validationData.csv')
valdata$FLOOR <- factor(valdata$FLOOR, ordered = FALSE)
valdata_loc <- valdata[,1:520]
valdata_loc[valdata_loc == 100] = -105
View(valdata_loc)
valdata_loc_cs <- t(scale(t(valdata_loc)))
View(valdata_loc_cs)
valdata_loc_cs[is.nan(valdata_loc_cs)] = 0
valdata_pcd <-valdata_loc_cs %*% pcatest$rotation
h2o_valdatasets <- list()
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
h2o_val_predicts <- map2(h2o_rfs_val, h2o_valdatasets, function(x,y) h2o.predict(x,y))
Metrics::rmse(valdata$LATITUDE, h2o_val_predicts$LATITUDE)
Metrics::rmse(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
plot(valdata$LONGITUDE, h2o_val_predicts$LONGITUDE)
valdata$LONGITUDE
h2o_val_predicts$LONGITUDE
plot(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
Metrics::rmse(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
Metrics::rmse(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$FLOOR, as.vector(h2o_val_predicts$FLOOR))
confusionMatrix(valdata$FLOOR, h2o_val_predicts$FLOOR
plot(valdata$LONGITUDE, as.vector(h2o_val_predicts$LONGITUDE))
plot(valdata$LATITUDE, as.vector(h2o_val_predicts$LATITUDE))
plot(valdata$FLOOR, as.vector(h2o_val_predicts$FLOOR))
h2o_val_predicts$FLOOR
plot(h2o_val_predicts$LONGITUDE, h2o_val_predicts$LATITUDE)
plot(as.vector(h2o_val_predicts$LONGITUDE), as.vector(h2o_val_predicts$LATITUDE))
h2o_rfs_val$LONGITUDE@have_mojo
h2o_rfs_val$LONGITUDE@model$names
h2o_rfs_val$LONGITUDE@model$column_types
h2o_rfs_val$LONGITUDE@model$domains
h2o_rfs_val$LONGITUDE@model$validation_metrics
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
valdata_pcd <- valdata_pcd[,1:50]
View(valdata_pcd)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_valdatasets$FLOOR
h2o_valdatasets$LONGITUDE
h2o_valdatasets$LATITUDE
h2o_valdatasets$LATITUDE$LATITUDE
Metrics::rmse(as.vector(h2o_valdatasets$LATITUDE$LATITUDE), as.vector(h2o_val_predicts$LATITUDE))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
#h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
#h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, 'i' = valdata[,i]))
}
h2o_valdatasets$FLOOR
h2o_traindatasets$LONGITUDE
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, 'i' = valdata[,i]))
}
h2o_traindatasets$LONGITUDE
h2o_valdatasets$FLOOR
h2o_valdatasets <- list()
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
valdata_pcd <- valdata_pcd[,1:50]
View(valdata)
traindata_train
valdata
str(valdata)
str(traindata_train)
valdata <- as.data.frame(valdata)
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
valdata$FLOOR
traindata_train$FLOOR
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = factor(valdata[,i])))
}
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR
str(h2o_valdatasets$FLOOR$i)
str(h2o_traindatasets$FLOOR$i)
valdata$FLOOR
is.factor(valdata$FLOOR)
h2o_valdatasets$FLOOR$i <- factor(h2o_valdatasets$FLOOR$i)
valdata$FLOOR <- factor(valdata$FLOOR)
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
h2o_valdatasets$FLOOR$i
is.factor(h2o_valdatasets$FLOOR$i)
is.factor(h2o_traindatasets$FLOOR$i)
is.data.frame(valdata)
is.data.frame(traindata_train)
is.data.frame(traindata_test)
h2o_testdatasets$FLOOR$i
is.factor(h2o_testdatasets$FLOOR$i)
is.factor(h2o_testdatasets$LONGITUDE$i)
valdata <- read_csv('validationData.csv')
valdata <- read.csv('validationData.csv')
is.data.frame(valdata)
valdata$FLOOR <- factor(valdata$FLOOR)
h2o_traindatasets <- list()
h2o_testdatasets <- list()
h2o_valdatasets <- list()
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
is.factor(h2o_valdatasets$FLOOR$i)
is.factor(h2o_testdatasets$FLOOR$i)
i = valdata[,'FLOOR']
is.factor(i)
ttt <- cbind(valdata_pcd, i = valdata[,'FLOOR'])
is.factor(ttt$FLOOR)
is.factor(ttt$i)
valdata_pcd <- as.data.frame(valdata_pcd[,1:50])
for (i in c('LONGITUDE', 'LATITUDE', 'FLOOR')) {
h2o_traindatasets[[i]] <- as.h2o(cbind(pcad_d50_train, i = traindata_train[,i]))
h2o_testdatasets[[i]] <- as.h2o(cbind(pcad_d50_test, i = traindata_test[,i]))
h2o_valdatasets[[i]] <- as.h2o(cbind(valdata_pcd, i = valdata[,i]))
}
is.factor(h2o_valdatasets$FLOOR$i)
h2o_rfs_val <- map2 (h2o_traindatasets, h2o_valdatasets,
function(x,y) h2o.randomForest(y = 'i', training_frame = x, validation_frame = y, ntrees = 500))
h2o_rfs_val$FLOOR
h2o_rfs_val$LATITUDE
h2o_rfs_val$LONGITUDE
